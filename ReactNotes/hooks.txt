hooks : hooks are used similsr to life cycle methods in class components.
hooks are functions that starts with use and used for different purposes

react provides multiple hooks such as 
 i.useState: it is used to update the state value and rerendr the component.
   const [value,setValue]=useState(initialValue)

 ii.useEffect : it is used to deal with the side effects, it runs the function after the 
 component painted, and it re runs teh function everytime its dependency state is updated.
 if teh dependency array is empty, then it runs only the first time.
     useEffect(callbackfn,[dependencies])
 iii. useContext : it is used to take the global context value
       const {value} =useContext(contextName) 

  iv.useRef : it is used to create a ref to manipulate the DOM.
     const someRef = useRef();         

   v.useCallback : useCallback is used to remember/memorize the function such that  
    it will not undergo re-render

      const memorizedFunction = useCallback(callbackfn,[dependencies])

      const handleClick =useCallback(()=>console.log("hello world"),[])

      To make Child components stop from re rendering whern props are same, we 
      use Higher order component React.memo

  vi.useMemo : useMemo is used to memorize the values or   expensive calculations
        
         const memorizedFunction = useCallback(callbackfn,[dependencies])


  vii.useId : it is used to generate unique id's
        const id= useId()

  viii.useReducer :   useReducer is a smaller version of redux
  const [state,dispatch] = useReducer(reducer,initialvalue)    

  ix. custom hooks: custom hooks can be created as functions that starts with 'use' keyword
      